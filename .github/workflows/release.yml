name: Version, Release & Publish Docker

on:
  push:
    branches: [develop, main]

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}   # ghcr.io/<owner>/<repo>
  DOCKER_BUILDKIT: "1"
  # Default to dry-run in local 'act' runs; set repo variable DRY_RUN=false to actually publish when testing locally.
  DRY_RUN: ${{ vars.DRY_RUN || 'true' }}
  # Hard-block npm auth so @semantic-release/npm can't accidentally kick in
  NPM_CONFIG_USERCONFIG: /dev/null

jobs:
  build-release-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # semantic-release needs full history

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install semantic-release and plugins (no npm plugin)
        run: |
          npm i -D semantic-release@22.0.12 @semantic-release/changelog@6.0.3 \
                 @semantic-release/commit-analyzer@11.1.0 @semantic-release/release-notes-generator@12.1.0 \
                 @semantic-release/git@10.0.1 @semantic-release/github@9.2.6

      - name: Choose release config by branch
        id: cfg
        run: |
          BR="${GITHUB_REF##*/}"
          if [ "$BR" = "main" ]; then
            echo "file=.releaserc.main.json" >> $GITHUB_OUTPUT
          else
            echo "file=.releaserc.develop.json" >> $GITHUB_OUTPUT
          fi

      - name: Show & validate selected config
        run: |
          echo "PWD=$(pwd)"
          echo "Using config: ${{ steps.cfg.outputs.file }}"
          test -f "${{ steps.cfg.outputs.file }}" || { echo "Config not found"; exit 1; }
          command -v jq >/dev/null || sudo apt-get update && sudo apt-get install -y jq
          jq . "${{ steps.cfg.outputs.file }}" >/dev/null || { echo "Config JSON invalid"; exit 1; }
          echo "----- BEGIN CONFIG -----"
          cat "${{ steps.cfg.outputs.file }}"
          echo "------ END CONFIG ------"

      - name: Run semantic-release
        id: semrel
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release \
            --config "./${{ steps.cfg.outputs.file }}" \
            --repository-url "https://github.com/${{ github.repository }}" \
            $([ "${{ env.DRY_RUN }}" = "true" ] && echo "--dry-run" )

      - name: Get current tag (last release)
        id: tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get most recent tag reachable from HEAD
          TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
          # Fall back to GitHub Release if tag is missing
          if [ -z "$TAG" ]; then
            TAG="$(gh release view --json tagName -q .tagName || true)"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Docker login to GHCR
        if: ${{ env.DRY_RUN != 'true' }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image with labels
        run: |
          VERSION="${{ steps.tag.outputs.version }}"
          [ -z "$VERSION" ] && { echo "Version could not be determined"; exit 1; }

          docker build \
            --label org.opencontainers.image.source=https://github.com/${{ github.repository }} \
            --label org.opencontainers.image.revision=${{ github.sha }} \
            --label org.opencontainers.image.version=v$VERSION \
            -t ${{ env.IMAGE_NAME }}:v$VERSION \
            .

      - name: Tag Docker channel aliases
        run: |
          VERSION="${{ steps.tag.outputs.version }}"
          BR="${GITHUB_REF##*/}"
          if [ "$BR" = "main" ]; then
            docker tag ${{ env.IMAGE_NAME }}:v$VERSION ${{ env.IMAGE_NAME }}:latest
          else
            docker tag ${{ env.IMAGE_NAME }}:v$VERSION ${{ env.IMAGE_NAME }}:develop
          fi

      - name: Push Docker images
        if: ${{ env.DRY_RUN != 'true' }}
        run: |
          VERSION="${{ steps.tag.outputs.version }}"
          BR="${GITHUB_REF##*/}"
          docker push ${{ env.IMAGE_NAME }}:v$VERSION
          if [ "$BR" = "main" ]; then
            docker push ${{ env.IMAGE_NAME }}:latest
          else
            docker push ${{ env.IMAGE_NAME }}:develop
          fi
